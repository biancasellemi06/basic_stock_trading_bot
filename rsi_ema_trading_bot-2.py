# -*- coding: utf-8 -*-
"""rsi_ema_trading_bot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vOjImOsn-tZVeDfoBVhYW11NgrR1Y3AL
"""

'''
Beginner Stock Trading Bot using RSI and EMA

Description:
  This code fetches stock data using yfinance, calculates RSI and EMA indicators,
  and plots relevant data to assist in strategy visualization.
'''

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta


class CombineBot:
    def __init__(self, symbol = 'TSLA', log_dir = 'data'):
        self.symbol = symbol
        self.position = False
        self.log = []
        self.log_dir = log_dir
        os.makedirs(self.log_dir, exist_ok=True)

    def retrieve_data(self):
        df = yf.download(self.symbol, period = "1d", interval = "1m", progress = False)
        return df

    def run(self):
        print(f"\nRunning Trading Bot for {self.symbol}...\n")
        try:
            df = self.retrieve_data()
            df = self.compute_indicators(df)
            self.check_signal(df)
        except Exception as e:
            print('Error:', e)

        # Save log
        log_path = os.path.join(self.log_dir, 'combined_log.csv')
        pd.DataFrame(self.log, columns = ['Time', 'Action', 'Price']).to_csv(log_path, index = False)
        print(f"Log saved to {log_path}")

    def compute_indicators(self, df):
        raise NotImplementedError("Must implement in child class")

    def check_signal(self, df):
        raise NotImplementedError("Must implement in child class")


class StockBot(CombineBot):
    def __init__(self, symbol = 'TSLA', short_window = 20, long_window = 100, rsi_period = 14):
        super().__init__(symbol)
        self.short_window = short_window
        self.long_window = long_window
        self.rsi_period = rsi_period

    def compute_indicators(self, df):
        df['short_EMA'] = df['Close'].ewm(span = self.short_window, adjust = False).mean()
        df['long_EMA'] = df['Close'].ewm(span = self.long_window, adjust = False).mean()

        delta = df['Close'].diff()
        gain = delta.clip(lower = 0)
        loss = -delta.clip(upper = 0)
        avg_gain = gain.rolling(window = self.rsi_period).mean()
        avg_loss = loss.rolling(window = self.rsi_period).mean()
        rs = avg_gain / avg_loss
        df['RSI'] = 100 - (100 / (1 + rs))
        return df

    def check_signal(self, df):
        latest = df.tail(1)
        short_ema = float(latest['short_EMA'].values[0])
        long_ema = float(latest['long_EMA'].values[0])
        rsi = float(latest['RSI'].values[0])
        price = float(latest['Close'].values[0])
        timestamp = latest.index[0].to_pydatetime()

        if short_ema > long_ema and rsi < 70 and not self.position:
            self.position = True
            self.log.append((timestamp, 'BUY', price))
            print(f'{timestamp} - BUY @ ${price:.2f} | EMA: {short_ema:.2f} > {long_ema:.2f}, RSI: {rsi:.2f}')

        elif short_ema < long_ema and rsi > 30 and self.position:
            self.position = False
            self.log.append((timestamp, 'SELL', price))
            print(f'{timestamp} - SELL @ ${price:.2f} | EMA: {short_ema:.2f} < {long_ema:.2f}, RSI: {rsi:.2f}')

        else:
            print(f'{timestamp} - HOLD @ ${price:.2f} | EMA: {short_ema:.2f} / {long_ema:.2f}, RSI: {rsi:.2f}')

# run_bot.py
import time

if __name__ == "__main__":
    bot = StockBot(symbol='TSLA')

    # Run the bot 5 times with 1-minute intervals (particularly for short-term day trades)
    for i in range(5):
        bot.run()
        time.sleep(60)